local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Untitled Fling Game Hub",
   Icon = 0,
   LoadingTitle = "Untitled Fling Game Hub",
   LoadingSubtitle = "by DrWhite & wellof",
   Theme = "Default",
   ConfigurationSaving = { Enabled = false },
   Discord = { Enabled = false },
   KeySystem = false
})

-- Tabs
local HacksTab = Window:CreateTab("Hacks", 4483362458)
local VisualTab = Window:CreateTab("Visual", 4483362458)
local KeybindsTab = Window:CreateTab("Keybinds", 4483362458)
local TeleportTab = Window:CreateTab("Teleport", 4483362458)

-- Keybinds
local function createKeybind(name, key, flag, item)
    return KeybindsTab:CreateKeybind({
        Name = name,
        CurrentKeybind = key,
        HoldToInteract = false,
        Flag = flag,
        Callback = function()
            game:GetService("ReplicatedStorage").Spawn:InvokeServer(item)
        end,
    })
end

local PalletKeybind = createKeybind("Pallet Spawn", "G", "PalletKeybind", "BrownDoska")
local SpeedyPotionKeybind = createKeybind("Speedy Potion", "C", "SpeedyPotionKeybind", "Speedy Potion")
local AntiGPotionKeybind = createKeybind("AntiG Potion", "V", "AntiGPotionKeybind", "AntiG Potion")
local LargePotionKeybind = createKeybind("Large Potion", "Z", "LargePotionKeybind", "Large Potion")
local SmallPotionKeybind = createKeybind("Small Potion", "X", "SmallPotionKeybind", "Small Potion")

-- Input fields
local function createInput(name, key, flag, keybind)
    return KeybindsTab:CreateInput({
        Name = name,
        CurrentValue = key,
        PlaceholderText = "Enter new key",
        Flag = flag,
        Callback = function(text)
            if type(text) == "string" and text:match("^[A-Za-z0-9]$") then
                keybind:Set(string.upper(text))
            end
        end,
    })
end

createInput("Pallet", "G", "PalletInputKeybind", PalletKeybind)
createInput("Speedy Potion", "C", "SpeedyPotionInputKeybind", SpeedyPotionKeybind)
createInput("AntiG Potion", "V", "AntiGPotionInputKeybind", AntiGPotionKeybind)
createInput("Large Potion", "Z", "LargePotionInputKeybind", LargePotionKeybind)
createInput("Small Potion", "X", "SmallPotionInputKeybind", SmallPotionKeybind)

-- ESP System
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local ESP_Enabled = false

local function toggleESP(enable)
    ESP_Enabled = enable
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            local character = player.Character
            if character then
                local highlight = character:FindFirstChild("ESP_Highlight")
                if enable then
                    if not highlight then
                        highlight = Instance.new("Highlight")
                        highlight.Name = "ESP_Highlight"
                        highlight.Parent = character
                        highlight.FillColor = Color3.fromRGB(255, 0, 0)
                        highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
                    end
                else
                    if highlight then
                        highlight:Destroy()
                    end
                end
            end
        end
    end
end

HacksTab:CreateToggle({
    Name = "ESP",
    CurrentValue = false,
    Flag = "ESPToggle",
    Callback = toggleESP,
})

-- Infinite Jump
local UserInputService = game:GetService("UserInputService")
local jumpConnection

local function toggleInfiniteJump(enable)
    if enable and not jumpConnection then
        jumpConnection = UserInputService.JumpRequest:Connect(function()
            if LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then
                LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
            end
        end)
    elseif not enable and jumpConnection then
        jumpConnection:Disconnect()
        jumpConnection = nil
    end
end

HacksTab:CreateToggle({
    Name = "Infinite Jump",
    CurrentValue = false,
    Flag = "InfiniteJumpToggle",
    Callback = toggleInfiniteJump,
})

-- Teleport to Players
local function getPlayerList()
    local players = {}
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            table.insert(players, player.Name)
        end
    end
    return players
end

local SelectedPlayer
local PlayerDropdown = TeleportTab:CreateDropdown({
    Name = "Choose Player",
    Options = getPlayerList(),
    Callback = function(option) SelectedPlayer = option[1] end,
})

TeleportTab:CreateButton({
    Name = "Refresh Player List",
    Callback = function() PlayerDropdown:Refresh(getPlayerList(), false) end,
})

game.Players.PlayerAdded:Connect(function()
    PlayerDropdown:Refresh(getPlayerList(), false)
end)

TeleportTab:CreateButton({
    Name = "Teleport to Player",
    Callback = function()
        local target = Players:FindFirstChild(SelectedPlayer)
        if target and target.Character and target.Character:FindFirstChild("HumanoidRootPart") then
            local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
            if hrp then hrp.CFrame = target.Character.HumanoidRootPart.CFrame end
        end
    end,
})

-- Teleport to GemBoxes
local gemboxIndex, gemboxesData = 0, {}

local function getGemboxList()
    local gemboxList = {}
    for _, box in pairs(game.Workspace.GemBoxes:GetChildren()) do
        if box:IsA("Model") then
            if not gemboxesData[box] then
                gemboxIndex = gemboxIndex + 1
                gemboxesData[box] = gemboxIndex
            end
            table.insert(gemboxList, box.Name .. " #" .. gemboxesData[box])
        end
    end
    return gemboxList
end

local SelectedGembox
local GemboxDropdown = TeleportTab:CreateDropdown({
    Name = "Choose Gembox",
    Options = getGemboxList(),
    Callback = function(option)
        for box, id in pairs(gemboxesData) do
            if option[1] == box.Name .. " #" .. id then
                SelectedGembox = box
                return
            end
        end
        SelectedGembox = nil
    end,
})

TeleportTab:CreateButton({
    Name = "Refresh Gembox List",
    Callback = function() GemboxDropdown:Refresh(getGemboxList(), false) end,
})

game.Workspace.GemBoxes.ChildRemoved:Connect(function(child)
    gemboxesData[child] = nil
    GemboxDropdown:Refresh(getGemboxList(), false)
end)

TeleportTab:CreateButton({
    Name = "Teleport to Gembox",
    Callback = function()
        if SelectedGembox then
            local basePart = SelectedGembox:FindFirstChildWhichIsA("BasePart", true)
            local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
            if hrp and basePart then hrp.CFrame = basePart.CFrame + Vector3.new(0, 5, 0) end
        end
    end,
})
